{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates pipelines and required roles to provide CI/CD for Terraform",
    "Metadata": {
    },
    "Mappings": {
        "Functions": {
            "Notification": {
                "S3Key": "email_notification.zip",
                "Handler": "email_notification"
            },
            "Cleanup": {
                "S3Key": "stack_cleanup.zip",
                "Handler": "stack_cleanup"
            },
            "DeleteBucketContents": {
                "LogLevel": "debug"
            },
            "AnonymousReporting": {
                "S3Key": "anon_reporting.zip",
                "Handler": "anon_reporting"
            },
            "CleanupStacks": {
                "S3Key": "cleanup_on_stack_delete.zip",
                "Handler": "cleanup_on_stack_delete"
            }
        },
        "General": {
            "CIConfig": {
                "CITestPath": "ci"
            },
            "CodeRepo": {
                "S3BucketPrefix": "solutions-",
                "S3KeyPrefix": "aws-cloudformation-validation-pipeline/v1.0/"
            },
            "Prefix": {
                "DeployKey": "builds/",
                "ReportKey": "reports/"
            },
            "AbsoluteBucketName": {
                "Enabled": "No"
            }
        }
    },
    "Parameters": {
        "CodeCommitRepoName": {
            "Description": "Name of CodeCommit Repository to use as pipeline source",
            "Type": "String"
        },
        "EmailPrimary": {
            "AllowedPattern": "^$|^[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9_\\-\\.]+\\.[a-zA-Z\\.]+[a-zA-Z]+$",
            "Default": "",
            "Description": "Primary email to notify for pending manual approvals and pipeline execution notifications",
            "Type": "String"
        },
        "ManualApproval": {
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Default": "Yes",
            "Description": "Require manual approval before deploying templates, will email Primary Email and (optionally) Secondary Email specified in the Email Notification Settings section",
            "Type": "String"
        },
        "PostCreateTest1": {
            "Default": "",
            "Description": "name for 1st post-stack-creation test lambda function (optional)",
            "Type": "String"
        },
        "PreCreateTest1": {
            "Default": "",
            "Description": "name for 1st pre-stack-creation test lambda function (optional)",
            "Type": "String"
        },
        "SourceRepoBranch": {
            "Default": "master",
            "Description": "Name of branch to use as pipeline source",
            "Type": "String"
        },
        "StackCreationRoleArn": {
            "Description": "Role used to launch CloudFormation stacks",
            "Type": "String"
        },
        "CloudflareEmail": {
          "Description": "CloudflareEmail",
          "Type": "String"
        },
        "CloudflareParameterName": {
          "Description": "The parameter store name where to find CloudflareToken",
          "Type": "String"
        },
        "FastlyParameterName": {
          "Description": "The parameter store name where to find CloudflareToken",
          "Type": "String"
        },
        "ApplicationName": {
            "Description": "The parameter store name where to find CloudflareToken",
            "Type": "String"
        }
    },
    "Conditions": {
        "EmailPrimary": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "EmailPrimary"
                        },
                        ""
                    ]
                }
            ]
        },
        "EnablePostCreateTest1": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PostCreateTest1"
                        },
                        ""
                    ]
                }
            ]
        },
        "EnablePreCreateTest1": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PreCreateTest1"
                        },
                        ""
                    ]
                }
            ]
        },
        "ManualApproval": {
            "Fn::Equals": [
                {
                    "Ref": "ManualApproval"
                },
                "Yes"
            ]
        },
        "UseRelativeBucket": {
            "Fn::Equals": [
                {
                    "Fn::FindInMap": [
                        "General",
                        "AbsoluteBucketName",
                        "Enabled"
                    ]
                },
                "No"
            ]
        }
    },
    "Resources": {
        "DeployBucket": {
            "Type": "AWS::S3::Bucket"
        },
        "KeyBucket": {
            "Type": "AWS::S3::Bucket"
        },
        "ArtifactBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private",
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "NoncurrentVersionExpirationInDays": 30,
                            "Status": "Enabled"
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            }
        },
        "ScratchBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            }
        },
        "CodePipelineServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codepipeline.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "CFN-CICD-CodePipelineService",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Fn::If": [
                                        "ManualApproval",
                                        {
                                            "Action": [
                                                "sns:Publish"
                                            ],
                                            "Resource": [
                                                {
                                                    "Ref": "SNSTopic"
                                                }
                                            ],
                                            "Effect": "Allow"
                                        },
                                        {
                                            "Ref": "AWS::NoValue"
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:GetBucketVersioning",
                                        "s3:PutObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}/*"
                                        }
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codeCommit:GetUploadArchiveStatus",
                                        "codecommit:CancelUploadArchive",
                                        "codecommit:GetBranch",
                                        "codecommit:GetCommit",
                                        "codecommit:GetUploadStatus",
                                        "codecommit:UploadArchive"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            ":",
                                            [
                                                "arn:aws:codecommit",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                {
                                                    "Ref": "CodeCommitRepoName"
                                                }
                                            ]
                                        ]
                                    },
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": "lambda:ListFunctions",
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": "lambda:InvokeFunction",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Validate_Template"
                                        },
                                        {
                                            "Fn::Sub": [
                                                "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DeployToS3LambdaName}",
                                                {
                                                    "DeployToS3LambdaName": {
                                                        "Fn::ImportValue": "DeployToS3LambdaName"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::Sub": [
                                                "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GenerateReportLambdaName}",
                                                {
                                                    "GenerateReportLambdaName": {
                                                        "Fn::ImportValue": "GenerateReportLambdaName"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::If": [
                                                "EnablePreCreateTest1",
                                                {
                                                    "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PreCreateTest1}"
                                                },
                                                {
                                                    "Ref": "AWS::NoValue"
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::If": [
                                                "EnablePostCreateTest1",
                                                {
                                                    "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PostCreateTest1}"
                                                },
                                                {
                                                    "Ref": "AWS::NoValue"
                                                }
                                            ]
                                        }
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                  "Action": [
                                      "codebuild:BatchGetBuilds",
                                      "codebuild:StartBuild"
                                  ],
                                  "Resource": "*",
                                  "Effect": "Allow"
                              }
                            ]
                        }
                    }
                ]
            }
        },
        "CodePipeline": {
            "Type": "AWS::CodePipeline::Pipeline",
            "Properties": {
                "RoleArn": {
                    "Fn::GetAtt": [
                        "CodePipelineServiceRole",
                        "Arn"
                    ]
                },
                "ArtifactStore": {
                    "Type": "S3",
                    "Location": {
                        "Ref": "ArtifactBucket"
                    }
                },
                "Stages": [
                    {
                        "Name": "Source",
                        "Actions": [
                            {
                                "InputArtifacts": [],
                                "Name": "Source",
                                "ActionTypeId": {
                                    "Category": "Source",
                                    "Owner": "AWS",
                                    "Version": "1",
                                    "Provider": "CodeCommit"
                                },
                                "OutputArtifacts": [
                                    {
                                        "Name": "TemplateArtifact"
                                    }
                                ],
                                "Configuration": {
                                    "BranchName": {
                                        "Ref": "SourceRepoBranch"
                                    },
                                    "RepositoryName": {
                                        "Ref": "CodeCommitRepoName"
                                    }
                                },
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "StackCreation",
                        "Actions": [
                            {
                                "InputArtifacts": [
                                    {
                                        "Name": "TemplateArtifact"
                                    }
                                ],
                                "Name": "Create_Stacks",
                                "ActionTypeId": {
                                    "Category": "Build",
                                    "Owner": "AWS",
                                    "Version": "1",
                                    "Provider": "CodeBuild"
                                },
                                "OutputArtifacts": [
                                    {
                                        "Name": "StackArtifact"
                                    }
                                ],
                                "Configuration": {
                                    "ProjectName": {
                                      "Ref": "TFPlanCodeBuildProject"
                                    }
                                },
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "EnablePostCreateTest1",
                            {
                                "Name": "PostCreateTests",
                                "Actions": [
                                    {
                                        "InputArtifacts": [
                                            {
                                                "Name": "StackArtifact"
                                            }
                                        ],
                                        "Name": {
                                            "Ref": "PostCreateTest1"
                                        },
                                        "ActionTypeId": {
                                            "Category": "Invoke",
                                            "Owner": "AWS",
                                            "Version": "1",
                                            "Provider": "Lambda"
                                        },
                                        "OutputArtifacts": [],
                                        "Configuration": {
                                            "FunctionName": {
                                                "Ref": "PostCreateTest1"
                                            },
                                            "UserParameters": {
                                                "Fn::Sub": [
                                                    "{ \"StackId\": \"${AWS::StackId}\", \"CITestPath\": \"${CITestPath}\", \"ScratchBucket\": \"${ScratchBucket}\" }",
                                                    {
                                                        "CITestPath": {
                                                            "Fn::FindInMap": [
                                                                "General",
                                                                "CIConfig",
                                                                "CITestPath"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "RunOrder": 1
                                    }
                                ]
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Name": "ApprovalAndReporting",
                        "Actions": [
                            {
                                "InputArtifacts": [
                                    {
                                        "Name": "StackArtifact"
                                    }
                                ],
                                "Name": "Generate_Report",
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Version": "1",
                                    "Provider": "Lambda"
                                },
                                "OutputArtifacts": [],
                                "Configuration": {
                                    "FunctionName": {
                                        "Fn::ImportValue": "GenerateReportLambdaName"
                                    },
                                    "UserParameters": {
                                        "Fn::Sub": [
                                            "{ \"CITestPath\": \"${CITestPath}\", \"ScratchBucket\": \"${ScratchBucket}\", \"ReportBucket\": \"${ReportBucketName}\", \"ReportKey\": \"${ReportKey}\", \"SNSTopic\": \"${SNSTopic}\"}",
                                            {
                                                "ReportBucketName": {
                                                    "Ref": "DeployBucket"
                                                },
                                                "CITestPath": {
                                                    "Fn::FindInMap": [
                                                        "General",
                                                        "CIConfig",
                                                        "CITestPath"
                                                    ]
                                                },
                                                "ReportKey": {
                                                    "Fn::FindInMap": [
                                                        "General",
                                                        "Prefix",
                                                        "ReportKey"
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                "RunOrder": 1
                            },
                            {
                                "Fn::If": [
                                    "ManualApproval",
                                    {
                                        "InputArtifacts": [],
                                        "Name": "Manual_Approval",
                                        "ActionTypeId": {
                                            "Category": "Approval",
                                            "Owner": "AWS",
                                            "Version": "1",
                                            "Provider": "Manual"
                                        },
                                        "Configuration": {
                                            "NotificationArn": {
                                                "Ref": "SNSTopic"
                                            },
                                            "ExternalEntityLink": {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "https://",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        ".console.aws.amazon.com/codepipeline/home?region=",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        "#/dashboard"
                                                    ]
                                                ]
                                            },
                                            "CustomData": "Please thouroughly review pipeline test results, template and stacks before approving."
                                        },
                                        "RunOrder": 2
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "SNSTopic": {
            "Condition": "ManualApproval",
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Fn::If": [
                            "EmailPrimary",
                            {
                                "Endpoint": {
                                    "Ref": "EmailPrimary"
                                },
                                "Protocol": "email"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ]
            }
        },
        "NotificationSchedule": {
            "Type": "AWS::Events::Rule",
            "Condition": "EmailPrimary",
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "-",
                        [
                            "NotificationSchedule",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "ScheduleExpression": "rate(5 minutes)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "NotificationLambda",
                                "Arn"
                            ]
                        },
                        "Id": "NotificationTarget",
                        "Input": {
                            "Fn::Join": [
                                "",
                                [
                                    "{\"pipeline\": \"",
                                    {
                                        "Ref": "CodePipeline"
                                    },
                                    "\", \"region\": \"",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\", \"topic\": \"",
                                    {
                                        "Ref": "SNSTopic"
                                    },
                                    "\"}"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "NotificationPermissions": {
            "Condition": "EmailPrimary",
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "NotificationLambda"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "NotificationSchedule",
                        "Arn"
                    ]
                }
            }
        },
        "NotificationRole": {
            "Condition": "EmailPrimary",
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "schedulednotification",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codepipeline:GetPipeline",
                                        "codepipeline:GetPipelineState"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codepipeline:ListPipelines"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:FilterLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "sns:Publish"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "SNSTopic"
                                        }
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Query",
                                        "dynamodb:UpdateItem"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:dynamodb:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":table/",
                                                    {
                                                        "Ref": "NotificationDynamoTable"
                                                    }
                                                ]
                                            ]
                                        }
                                    ],
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "NotificationDynamoTable": {
            "Condition": "EmailPrimary",
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "FailureId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "FailureId",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                }
            }
        },
        "NotificationLambda": {
            "Condition": "EmailPrimary",
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Fn::FindInMap": [
                                    "Functions",
                                    "Notification",
                                    "Handler"
                                ]
                            },
                            "lambda_handler"
                        ]
                    ]
                },
                "MemorySize": "512",
                "Role": {
                    "Fn::GetAtt": [
                        "NotificationRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": "300",
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "General",
                                        "CodeRepo",
                                        "S3BucketPrefix"
                                    ]
                                },
                                {
                                "Fn::If": [
                                    "UseRelativeBucket",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "General",
                                        "CodeRepo",
                                        "S3KeyPrefix"
                                    ]
                                },
                                {
                                    "Fn::FindInMap": [
                                        "Functions",
                                        "Notification",
                                        "S3Key"
                                    ]
                                }
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "table_name": {
                            "Ref": "NotificationDynamoTable"
                        }
                    }
                }
            }
        },
        "CodeBuildServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codebuild.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "codebuildrole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/TF-Plan-${ApplicationName}"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/TF-Plan-${ApplicationName}:*"
                                        }
                                    ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Action": [
                                        "codeCommit:GetUploadArchiveStatus",
                                        "codecommit:CancelUploadArchive",
                                        "codecommit:GetBranch",
                                        "codecommit:GetCommit",
                                        "codecommit:GitPull",
                                        "codecommit:GetUploadStatus",
                                        "codecommit:UploadArchive"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            ":",
                                            [
                                                "arn:aws:codecommit",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                {
                                                    "Ref": "CodeCommitRepoName"
                                                }
                                            ]
                                        ]
                                    },
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:GetBucketVersioning",
                                        "s3:ListObjects"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}/*"
                                        }
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "ssm:GetParameters"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CloudflareParameterName}"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${FastlyParameterName}"
                                        }
                                    ],
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "TFPlanCodeBuildProject": {
            "Type": "AWS::CodeBuild::Project",
            "Properties": {
                "Name": {
                    "Fn::Sub": "TF-Plan-${ApplicationName}"
                },
                "Description": "Submit build jobs as part of CFN Template CI/CD pipeline",
                "ServiceRole": {
                    "Fn::GetAtt": [
                        "CodeBuildServiceRole",
                        "Arn"
                    ]
                },
                "Artifacts": {
                    "Type": "CODEPIPELINE"
                },
                "Environment": {
                    "Type": "LINUX_CONTAINER",
                    "ComputeType": "BUILD_GENERAL1_SMALL",
                    "Image": "aws/codebuild/docker:17.09.0",
                    "EnvironmentVariables": [
                        {
                            "Name": "CLOUDFLARE_EMAIL",
                            "Value": {
                                "Fn::Sub": "${CloudflareEmail}"
                            }
                        },
                        {
                            "Type": "PARAMETER_STORE",
                            "Name": "CLOUDFLARE_TOKEN",
                            "Value": {
                                "Fn::Sub": "${CloudflareParameterName}"
                            }
                        },
                        {
                            "Type": "PARAMETER_STORE",
                            "Name": "FASTLY_API_KEY",
                            "Value": {
                                "Fn::Sub": "${FastlyParameterName}"
                            }
                        }
                    ]
                },
                "Source": {
                    "Type": "CODEPIPELINE"
                },
                "TimeoutInMinutes": 10
            }
        }
    },
    "Outputs": {
        "DeploymentBucket": {
            "Value": {
                "Ref": "DeployBucket"
            }
        }
    }
}
