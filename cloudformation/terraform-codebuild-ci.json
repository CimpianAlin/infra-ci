Description: >

    (SO0024) - Deployment Pipeline for Go Applications on AWS - AWS CloudFormation Template for
    AWS Solutions Builder Deployment Pipeline for Go Applications on AWS - **WARNING** This template
    creates AWS resources. You will be billed for the AWS resources used if you create
    a stack from this template.
    This CloudFormation template will deploy a full CI/CD pipeline for Go
    development. It includes building with AWS CodeBuild, and infrastructure
    deployment via AWS CloudFormation. It will create an AWS CodePipeline for
    orchastrating builds, testing and deployments to beta and production
    environments.

Parameters:

    ApplicationName:
        Description: This will be used to name the pipeline and build resources
        Type: String
        AllowedPattern: '[A-Za-z0-9-]+'

    ArtifactS3Bucket:
        Description: An existing S3 bucket within this AWS account
        Type: String

    GitHubRepository:
        Description: Enter the repository name that should be monitored for changes
        Type: String

    CodeCommitName:
        Description: Enter the repository name that should be monitored for changes
        Type: String

    GitHubBranch:
        Description: Enter the GitHub branch to monitored
        Type: String
        Default: master

    CloudflareEmail:
        Description: CloudflareEmail
        Type: String

    CloudflareParameterName:
        Description: The parameter store name where to find CloudflareToken
        Type: String

    FastlyParameterName:
        Description: The parameter store name where to find CloudflareToken
        Type: String

Mappings:
  Send:
    AnonymousUsage:
      Data: No


Metadata:

    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: Application Configuration
                Parameters:
                    - ApplicationName
            -
                Label:
                    default: GitHub Configuration
                Parameters:
                    - GitHubRepository
                    - GitHubBranch

        ParameterLabels:
            ApplicationName:
                default: Application Name
            ArtifactS3Bucket:
                default: CodePipeline S3 Bucket
            GitHubRepository:
                default: Repository Name
            GitHubUser:
                default: Repository Owner
            GitHubBranch:
                default: Repository Branch

Resources:

    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref ApplicationName
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/docker:17.09.0
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    -
                        Name: CLOUDFLARE_EMAIL
                        Value: !Sub ${CloudflareEmail}
                    -
                        Type: PARAMETER_STORE
                        Name: CLOUDFLARE_TOKEN
                        Value: !Sub ${CloudflareParameterName}
                    -
                        Type: PARAMETER_STORE
                        Name: FASTLY_API_KEY
                        Value: !Sub ${FastlyParameterName}
            Artifacts:
                Name: !Ref ApplicationName
                Type: CODEPIPELINE


    CodeDeployApplication:
        Type: AWS::CodeDeploy::Application
        Properties:
            ApplicationName: !Sub ${ApplicationName}

    CodeDeployServiceRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "codedeploy.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceStatus",
                                "tag:GetTags",
                                "tag:GetResources",
                                "sns:Publish",
                                "cloudwatch:DescribeAlarms"
                            ],
                            "Resource": "*"
                            }
                        ]
                    }

    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codebuild.amazonaws.com"
                            }
                        }]
                    }
            Policies:
                -
                    PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
                    PolicyDocument: !Sub |
                        {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Resource": [ "*" ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/*"
                                    ],
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:PutObject"
                                    ]
                                },
                                {
                                  "Effect": "Allow",
                                  "Resource": [
                                      "arn:aws:s3:::codepipeline-us-east-1-*"
                                  ],
                                  "Action": [
                                      "s3:PutObject",
                                      "s3:GetObject",
                                      "s3:GetObjectVersion"
                                    ]
                                }
                              ]
                          }


  Outputs:
      CreateStacksCodeBuildName:
          Description: The CodeDeploy application used across all environments
          Value: !Ref CodeDeployApplication
        Export:
            Name: CreateStacksCodeBuildName


    CodeDeployApplication:
        Description: The CodeDeploy application used across all environments
        Value: !Ref CodeDeployApplication
        Export:
            Name: !Sub CodeDeployApplication-${ApplicationName}

    CodeDeployServiceRoleArn:
        Description: The CodeDeploy service role used across all environments
        Value: !GetAtt CodeDeployServiceRole.Arn
        Export:
            Name: !Sub CodeDeployServiceRoleArn-${ApplicationName}


